#!/usr/bin/env coffee

request = require('superagent')
LedLamp = require('./PatternedLedLamp')
patterns = require('./LedPatterns')
irCommands = require('./irCommands')
fs = require('fs')
path = require('path')
_ = require('lodash')
xml2js = require('xml2js')

argv = require('optimist')
  .usage('Cycle LED light color in Hue.\nUsage: #{path.basename(process.execPath)} [options] <url>\n$0')
  .options 'u',
    alias: 'url'
    default: null
    type: 'string'
    description: 'The url of cctray feed, e.g. https://jenkins.jenkins-ci.org/cc.xml'
  .options 'p',
    alias: 'project'
    default: null
    type: 'string'
    description: 'The name of the project need to monitored'
  .options 'a',
    alias: 'port'
    default: null
    type: 'string'
    description: 'The name of the port connected to Arduio board, leave empty for auto-detect'
  .options 'i',
    alias: 'interval'
    default: null
    type: 'string'
    description: 'The query interval(ms) (default: 1000ms)'
  .options 'U',
    alias: 'user'
    default: null
    type: 'string'
    description: 'User to log into CI server'
  .options 'P',
    alias: 'password'
    default: null
    type: 'string'
    description: 'Password to log into CI server'
  .argv
  
options = {}

for file in argv._
  if fs.existsSync(file) and path.extname(file) == '.json'
    _.extend options, JSON.parse(fs.readFileSync argv._[0], 'utf8')

for k, v of argv when k.length > 1 and v?
  options[k] = v

options.interval = parseInt(options.interval ? 1000, 10);

console.log options

options.interval = parseInt(options.interval, 10);

parseProjectStatus = (feed, projectName) ->
  projects = feed.Projects.Project
  project = _.find projects, (p) ->
    p.$.name == projectName
  
  if project.$.activity == 'Building'
    return 'Building'
  else
    return project.$.lastBuildStatus
    
parseOverallProjectStatus = (feed, projectList) ->
  statuses = _.map projectList, (project) ->
    parseProjectStatus(feed, project)
    
  for status in statuses
    switch status
      when 'Building', 'Failure', 'Exception', 'Pending', 'Unknown'
        lastStatus = status
        return lastStatus
      when 'Success', 'yellow'
        lastStatus = status
        break

  return lastStatus

LedLamp.findOrSetByName options.port, (err, led) ->
  return console.error err if err?
  
  process.stdin.resume()
  process.on 'SIGINT', ->
    console.log 'Exiting...'
    led.port.close (err)->
      process.exit(if err? then 1 else 0)
  
  console.log "Connecting to port #{led.portName}..."
  led.ready ->
    console.log "LED Connected"
    
    lastState = null

    update = ->
      r = request.get(options.url)
      
      if options.user?  
        r.auth(options.user, options.password)
        
      r.end (err, res) ->
          return console.error err if err?
          xml2js.parseString res.text, (err, feed) ->
            return console.error err if err?
            currentState = parseOverallProjectStatus feed, options.projects
            return if currentState == lastState
          
            lastState = currentState
          
            process.stdout.write "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
            process.stdout.write "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
          
            process.stdout.write "Status: "
          
            switch currentState
              when 'Building'
                led.setIRCommand irCommands.building
                process.stdout.write "In progress..."
              when 'Failure'
                led.setIRCommand irCommands.failure
                process.stdout.write "Failed"
              when 'Success'
                led.setIRCommand irCommands.success
                process.stdout.write "Passed"
              when 'Exception'
                led.setIRCommand irCommands.exception
              else # 'Pending', 'Unknown'
                led.setIRCommand irCommands.unknown
                process.stdout.write "No Result"  

    setInterval update, options.interval 



