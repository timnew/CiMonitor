#!/usr/bin/env coffee
coffee = require('coffee-script')

repl = require('repl')

commands = {}

interpret = (input, context, filename, callback) ->
  # remove the wrapping ()
  input = input[1..-2]

  args = input.split /[\s\n]+/

  cmd = args.shift()

  args.pop()

  return callback(null, undefined) if cmd == ''

  if commands[cmd]?
    commands[cmd](context, args, callback)
  else
    callback("Unknown command: #{cmd}")

repl.start
  prompt: '>'
  ignoreUndefined: true
  eval: interpret

converters =
  int: (value) ->
    parseInt(value, 10)
  float: (value) ->
    parseFloat(value)
  number: (value) ->
    Number(value)
  bool: (value) ->
    Boolean(value)
  json: (value) ->
    JSON.parse(value)
  base64: (value) ->
    new Buffer(value, 'base64')
  hex: (value) ->
    new Buffer(value, 'hex')

convertArgs = (argDefs, args) ->
  for index in [0..args.length - 1]
    converter = converters[argDefs[index]]
    if converter?
      converter(args[index])
    else
      args[index]

syncCmd = (cmd, argDefs, action) ->
  wrapper = (context, rawArgs, callback) ->
    try
      args = convertArgs(argDefs, rawArgs)
      result = action.apply(context, args)
      callback(null, result)
    catch ex
      callback(ex)

  commands[cmd] = wrapper

asyncCmd = (cmd, argDefs, action) ->
  wrapper = (context, rawArgs, callback) ->
    try
      args = convertArgs(argDefs, rawArgs)
      args.unshift(callback)
      action.apply(context, args)
    catch ex
      callback(ex)

  commands[cmd] = wrapper



