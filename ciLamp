#!/usr/bin/env coffee

request = require('superagent')
LedLamp = require('./PatternedLedLamp')
patterns = require('./LedPatterns')
url = require('url')
fs = require('fs')

options = require('optimist')
  .usage('Cycle LED light color in Hue.\nUsage: ciLamp [options] <url>\n$0')
  .options 's'
    alias: 'server'
    demand: null
    type: 'string'
    description: 'The url of CI server, e.g. https://jenkins.jenkins-ci.org'
  .options 'j'
    alias: 'job'
    demand: null
    type: 'string'
    description: 'The job to be monitored'
  .options 'p'
    alias: 'port'
    default: null
    type: 'string'
    description: 'The name of the port connected to Arduio board, leave empty for auto-detect'
  .options 'i'
    alias: 'interval'
    default: '1000'
    type: 'string'
    description: 'The query interval(ms) (default: 1000ms)'
  .options 'U'
    alias: 'user'
    default: null
    type: 'string'
    description: 'User to log into CI server'
  .options 'P'
    alias: 'password'
    default: null
    type: 'string'
    description: 'Password to log into CI server'
  .argv
  
if options._.length > 0
  options = JSON.parse(fs.readFileSync options._[0], 'utf8')

targetUrl = url.resolve options.server, "job/#{encodeURIComponent(options.job)}/api/json"

options.interval = parseInt(options.interval, 10);

LedLamp.findOrSetByName options.port, (err, led) ->
  return console.error err if err?
  
  console.log "Connecting to port #{led.portName}..."
  led.ready ->
    console.log "LED Connected"
    
    lastState = null

    update = ->
      request
        .get(targetUrl)
        .auth(options.user, options.password)
        .end (err, res) ->
          return if err?

          currentState = res.body.color
          
          return if currentState == lastState
          
          lastState = currentState
          
          process.stdout.write "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
          process.stdout.write "\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b"
          
          process.stdout.write "Status: "
          
          switch currentState
            when 'red_anime', 'yellow_anime', 'blue_anime', 'grey_anime', 'disabled_anime', 'aborted_anime', 'notbuilt_anime'
              led.applyPattern patterns.HueMarquee, {}
              process.stdout.write "In progress..."
            when 'red'
              led.applyPattern patterns.Constant, 
                color: [255, 0, 0]
              process.stdout.write "Failed"
            when 'yellow'
              led.applyPattern patterns.Constant,
                color: [128, 0, 128]
              process.stdout.write "Unstable"
            when 'blue'
              led.applyPattern patterns.Constant,
                color: [0, 255, 0]
              process.stdout.write "Passed"
            when 'grey', 'disabled', 'aborted',' notbuilt'
              led.applyPattern patterns.Blink, 
                color: [64, 64, 64]
                duration: 2000
                portion: 0.7
              process.stdout.write "No Result"  

    setInterval update, options.interval 



